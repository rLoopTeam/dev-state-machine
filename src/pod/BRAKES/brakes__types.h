#ifndef _BRAKES__TYPES_H_
#define _BRAKES__TYPES_H_

#include "../../COMPAT.h"
#include "../../state_machine.h"
#include "../../timers.h"
#include "brake/brake__types.h"


/////////////////////////////////////////////////////////////////////
//  Brakes States
/////////////////////////////////////////////////////////////////////
typedef enum 
{
    BRAKES_NULL_STATE = 0,
    BRAKES_DISABLED_STATE,
    BRAKES_ENABLED_STATE,
    BRAKES_HOLD_STATE,
    BRAKES_DEPLOY_STATE,
    BRAKES_RETRACT_STATE,
    BRAKES_SEEK_STATE,
    BRAKES_CONTROLLED_BRAKE_STATE,
    BRAKES_EMERGENCY_BRAKE_STATE,
    BRAKES_INTERLOCK_STATE
} E_BRAKES_STATE_T;
#define E_BRAKES_STATE_N 10

// Brakes state lookup
static char *brakes_state_lookup[] =
{
    "BRAKES_NULL_STATE",
    "BRAKES_DISABLED_STATE",
    "BRAKES_ENABLED_STATE",
    "BRAKES_HOLD_STATE",
    "BRAKES_DEPLOY_STATE",
    "BRAKES_RETRACT_STATE",
    "BRAKES_SEEK_STATE",
    "BRAKES_CONTROLLED_BRAKE_STATE",
    "BRAKES_EMERGENCY_BRAKE_STATE",
    "BRAKES_INTERLOCK_STATE"
};

// Brakes state lookup function
static inline const char * lookup_brakes_state(const E_BRAKES_STATE_T state)
{
    return brakes_state_lookup[state];
}


/////////////////////////////////////////////////////////////////////
//  Brakes Commands
/////////////////////////////////////////////////////////////////////
typedef enum 
{
    BRAKES_NO_CMD = 0,
    BRAKES_ENABLE,
    BRAKES_DISABLE,
    BRAKES_HOLD,
    BRAKES_DEPLOY,
    BRAKES_RETRACT,
    BRAKES_SEEK,
    BRAKES_CONTROLLED_BRAKE,
    BRAKES_EMERGENCY_BRAKE,
    BRAKES_INTERLOCK,
    BRAKES_RELEASE_INTERLOCK

} E_BRAKES_COMMAND_T;
#define E_BRAKES_COMMAND_N 11

// Brakes command lookup
static char *brakes_command_lookup[] = 
{
    "BRAKES_NO_CMD",
    "BRAKES_ENABLE",
    "BRAKES_DISABLE",
    "BRAKES_HOLD",
    "BRAKES_DEPLOY",
    "BRAKES_RETRACT",
    "BRAKES_SEEK",
    "BRAKES_CONTROLLED_BRAKE",
    "BRAKES_EMERGENCY_BRAKE",
    "BRAKES_INTERLOCK",
    "BRAKES_RELEASE_INTERLOCK"
};

// Brakes command lookup function
static inline const char * lookup_brakes_command(const E_BRAKES_COMMAND_T command)
{
    return brakes_command_lookup[command];
}


/////////////////////////////////////////////////////////////////////
//  Brakes command struct
/////////////////////////////////////////////////////////////////////
typedef struct 
{
    // Command
    E_BRAKES_COMMAND_T command;

    // @todo: handle indices -- e.g. brakes[0]

    struct {
                    
        struct {
                        
            int speed_what_units;
            int target_mm;
        
        } BRAKES_SEEK;
    
    } args;

} strBrakesCmd;


/////////////////////////////////////////////////////////////////////
//  Brakes struct to be used in sFCU
/////////////////////////////////////////////////////////////////////
typedef struct 
{
    // Internal command (first priority)
    strBrakesCmd internal_command;

    // External command (second priority)
    strBrakesCmd external_command;

    StateMachine sm;
    
    // Determine if the subsystem will accept commands
    bool enabled;

    // Index of this subsystem in its parent. Defaults to 0 for single-instance subsystems.
    int index;

    #if DEBUG == 1U
        // For debug printing
        char name[32];  
        char absname[64];
    #endif

    /**
     *  Brake array
     */
    strBrake sBrake[C_FCU__NUM_BRAKES];

} strBrakes;


/////////////////////////////////////////////////////////////////////
//  Brakes Allowable commands per state
/////////////////////////////////////////////////////////////////////
static const int brakes_allowed_state_commands[E_BRAKES_STATE_N][E_BRAKES_COMMAND_N] = 
{
    [BRAKES_DISABLED_STATE][BRAKES_ENABLE] = 1,
    [BRAKES_DISABLED_STATE][BRAKES_DISABLE] = 1,
    [BRAKES_ENABLED_STATE][BRAKES_HOLD] = 1,
    [BRAKES_ENABLED_STATE][BRAKES_DISABLE] = 1,
    [BRAKES_ENABLED_STATE][BRAKES_DEPLOY] = 1,
    [BRAKES_ENABLED_STATE][BRAKES_RETRACT] = 1,
    [BRAKES_ENABLED_STATE][BRAKES_SEEK] = 1,
    [BRAKES_ENABLED_STATE][BRAKES_CONTROLLED_BRAKE] = 1,
    [BRAKES_ENABLED_STATE][BRAKES_EMERGENCY_BRAKE] = 1,
    [BRAKES_ENABLED_STATE][BRAKES_INTERLOCK] = 1,
    [BRAKES_ENABLED_STATE][BRAKES_ENABLE] = 1,
    [BRAKES_HOLD_STATE][BRAKES_ENABLE] = 1,
    [BRAKES_HOLD_STATE][BRAKES_DISABLE] = 1,
    [BRAKES_HOLD_STATE][BRAKES_DEPLOY] = 1,
    [BRAKES_HOLD_STATE][BRAKES_RETRACT] = 1,
    [BRAKES_HOLD_STATE][BRAKES_SEEK] = 1,
    [BRAKES_HOLD_STATE][BRAKES_CONTROLLED_BRAKE] = 1,
    [BRAKES_HOLD_STATE][BRAKES_EMERGENCY_BRAKE] = 1,
    [BRAKES_HOLD_STATE][BRAKES_INTERLOCK] = 1,
    [BRAKES_HOLD_STATE][BRAKES_HOLD] = 1,
    [BRAKES_DEPLOY_STATE][BRAKES_DISABLE] = 1,
    [BRAKES_DEPLOY_STATE][BRAKES_HOLD] = 1,
    [BRAKES_DEPLOY_STATE][BRAKES_RETRACT] = 1,
    [BRAKES_DEPLOY_STATE][BRAKES_SEEK] = 1,
    [BRAKES_DEPLOY_STATE][BRAKES_CONTROLLED_BRAKE] = 1,
    [BRAKES_DEPLOY_STATE][BRAKES_EMERGENCY_BRAKE] = 1,
    [BRAKES_DEPLOY_STATE][BRAKES_INTERLOCK] = 1,
    [BRAKES_DEPLOY_STATE][BRAKES_DEPLOY] = 1,
    [BRAKES_RETRACT_STATE][BRAKES_DISABLE] = 1,
    [BRAKES_RETRACT_STATE][BRAKES_HOLD] = 1,
    [BRAKES_RETRACT_STATE][BRAKES_DEPLOY] = 1,
    [BRAKES_RETRACT_STATE][BRAKES_SEEK] = 1,
    [BRAKES_RETRACT_STATE][BRAKES_CONTROLLED_BRAKE] = 1,
    [BRAKES_RETRACT_STATE][BRAKES_EMERGENCY_BRAKE] = 1,
    [BRAKES_RETRACT_STATE][BRAKES_INTERLOCK] = 1,
    [BRAKES_RETRACT_STATE][BRAKES_RETRACT] = 1,
    [BRAKES_SEEK_STATE][BRAKES_DISABLE] = 1,
    [BRAKES_SEEK_STATE][BRAKES_HOLD] = 1,
    [BRAKES_SEEK_STATE][BRAKES_DEPLOY] = 1,
    [BRAKES_SEEK_STATE][BRAKES_RETRACT] = 1,
    [BRAKES_SEEK_STATE][BRAKES_SEEK] = 1,
    [BRAKES_SEEK_STATE][BRAKES_CONTROLLED_BRAKE] = 1,
    [BRAKES_SEEK_STATE][BRAKES_EMERGENCY_BRAKE] = 1,
    [BRAKES_SEEK_STATE][BRAKES_INTERLOCK] = 1,
    [BRAKES_CONTROLLED_BRAKE_STATE][BRAKES_DISABLE] = 1,
    [BRAKES_CONTROLLED_BRAKE_STATE][BRAKES_HOLD] = 1,
    [BRAKES_CONTROLLED_BRAKE_STATE][BRAKES_DEPLOY] = 1,
    [BRAKES_CONTROLLED_BRAKE_STATE][BRAKES_RETRACT] = 1,
    [BRAKES_CONTROLLED_BRAKE_STATE][BRAKES_SEEK] = 1,
    [BRAKES_CONTROLLED_BRAKE_STATE][BRAKES_EMERGENCY_BRAKE] = 1,
    [BRAKES_CONTROLLED_BRAKE_STATE][BRAKES_INTERLOCK] = 1,
    [BRAKES_CONTROLLED_BRAKE_STATE][BRAKES_CONTROLLED_BRAKE] = 1,
    [BRAKES_EMERGENCY_BRAKE_STATE][BRAKES_DISABLE] = 1,
    [BRAKES_EMERGENCY_BRAKE_STATE][BRAKES_HOLD] = 1,
    [BRAKES_EMERGENCY_BRAKE_STATE][BRAKES_DEPLOY] = 1,
    [BRAKES_EMERGENCY_BRAKE_STATE][BRAKES_RETRACT] = 1,
    [BRAKES_EMERGENCY_BRAKE_STATE][BRAKES_SEEK] = 1,
    [BRAKES_EMERGENCY_BRAKE_STATE][BRAKES_CONTROLLED_BRAKE] = 1,
    [BRAKES_EMERGENCY_BRAKE_STATE][BRAKES_INTERLOCK] = 1,
    [BRAKES_EMERGENCY_BRAKE_STATE][BRAKES_EMERGENCY_BRAKE] = 1,
    [BRAKES_INTERLOCK_STATE][BRAKES_RELEASE_INTERLOCK] = 1,
    [BRAKES_INTERLOCK_STATE][BRAKES_INTERLOCK] = 1
};

static inline const bool brakes_state_allows_command(const E_BRAKES_STATE_T state, const E_BRAKES_COMMAND_T command)
{
    return brakes_allowed_state_commands[state][command];
}


/////////////////////////////////////////////////////////////////////
//  Brakes target states by current state+command
/////////////////////////////////////////////////////////////////////
static const int brakes_state_command_target_state[E_BRAKES_STATE_N][E_BRAKES_COMMAND_N] = {
    [BRAKES_DISABLED_STATE][BRAKES_ENABLE] = BRAKES_ENABLED_STATE,
    [BRAKES_ENABLED_STATE][BRAKES_HOLD] = BRAKES_HOLD_STATE,
    [BRAKES_ENABLED_STATE][BRAKES_DISABLE] = BRAKES_DISABLED_STATE,
    [BRAKES_ENABLED_STATE][BRAKES_DEPLOY] = BRAKES_DEPLOY_STATE,
    [BRAKES_ENABLED_STATE][BRAKES_RETRACT] = BRAKES_RETRACT_STATE,
    [BRAKES_ENABLED_STATE][BRAKES_SEEK] = BRAKES_SEEK_STATE,
    [BRAKES_ENABLED_STATE][BRAKES_CONTROLLED_BRAKE] = BRAKES_CONTROLLED_BRAKE_STATE,
    [BRAKES_ENABLED_STATE][BRAKES_EMERGENCY_BRAKE] = BRAKES_EMERGENCY_BRAKE_STATE,
    [BRAKES_ENABLED_STATE][BRAKES_INTERLOCK] = BRAKES_INTERLOCK_STATE,
    [BRAKES_HOLD_STATE][BRAKES_ENABLE] = BRAKES_ENABLED_STATE,
    [BRAKES_HOLD_STATE][BRAKES_DISABLE] = BRAKES_DISABLED_STATE,
    [BRAKES_HOLD_STATE][BRAKES_DEPLOY] = BRAKES_DEPLOY_STATE,
    [BRAKES_HOLD_STATE][BRAKES_RETRACT] = BRAKES_RETRACT_STATE,
    [BRAKES_HOLD_STATE][BRAKES_SEEK] = BRAKES_SEEK_STATE,
    [BRAKES_HOLD_STATE][BRAKES_CONTROLLED_BRAKE] = BRAKES_CONTROLLED_BRAKE_STATE,
    [BRAKES_HOLD_STATE][BRAKES_EMERGENCY_BRAKE] = BRAKES_EMERGENCY_BRAKE_STATE,
    [BRAKES_HOLD_STATE][BRAKES_INTERLOCK] = BRAKES_INTERLOCK_STATE,
    [BRAKES_DEPLOY_STATE][BRAKES_DISABLE] = BRAKES_DISABLED_STATE,
    [BRAKES_DEPLOY_STATE][BRAKES_HOLD] = BRAKES_HOLD_STATE,
    [BRAKES_DEPLOY_STATE][BRAKES_RETRACT] = BRAKES_RETRACT_STATE,
    [BRAKES_DEPLOY_STATE][BRAKES_SEEK] = BRAKES_SEEK_STATE,
    [BRAKES_DEPLOY_STATE][BRAKES_CONTROLLED_BRAKE] = BRAKES_CONTROLLED_BRAKE_STATE,
    [BRAKES_DEPLOY_STATE][BRAKES_EMERGENCY_BRAKE] = BRAKES_EMERGENCY_BRAKE_STATE,
    [BRAKES_DEPLOY_STATE][BRAKES_INTERLOCK] = BRAKES_INTERLOCK_STATE,
    [BRAKES_RETRACT_STATE][BRAKES_DISABLE] = BRAKES_DISABLED_STATE,
    [BRAKES_RETRACT_STATE][BRAKES_HOLD] = BRAKES_HOLD_STATE,
    [BRAKES_RETRACT_STATE][BRAKES_DEPLOY] = BRAKES_DEPLOY_STATE,
    [BRAKES_RETRACT_STATE][BRAKES_SEEK] = BRAKES_SEEK_STATE,
    [BRAKES_RETRACT_STATE][BRAKES_CONTROLLED_BRAKE] = BRAKES_CONTROLLED_BRAKE_STATE,
    [BRAKES_RETRACT_STATE][BRAKES_EMERGENCY_BRAKE] = BRAKES_EMERGENCY_BRAKE_STATE,
    [BRAKES_RETRACT_STATE][BRAKES_INTERLOCK] = BRAKES_INTERLOCK_STATE,
    [BRAKES_SEEK_STATE][BRAKES_DISABLE] = BRAKES_DISABLED_STATE,
    [BRAKES_SEEK_STATE][BRAKES_HOLD] = BRAKES_HOLD_STATE,
    [BRAKES_SEEK_STATE][BRAKES_DEPLOY] = BRAKES_DEPLOY_STATE,
    [BRAKES_SEEK_STATE][BRAKES_RETRACT] = BRAKES_RETRACT_STATE,
    [BRAKES_SEEK_STATE][BRAKES_SEEK] = BRAKES_SEEK_STATE,
    [BRAKES_SEEK_STATE][BRAKES_CONTROLLED_BRAKE] = BRAKES_CONTROLLED_BRAKE_STATE,
    [BRAKES_SEEK_STATE][BRAKES_EMERGENCY_BRAKE] = BRAKES_EMERGENCY_BRAKE_STATE,
    [BRAKES_SEEK_STATE][BRAKES_INTERLOCK] = BRAKES_INTERLOCK_STATE,
    [BRAKES_CONTROLLED_BRAKE_STATE][BRAKES_DISABLE] = BRAKES_DISABLED_STATE,
    [BRAKES_CONTROLLED_BRAKE_STATE][BRAKES_HOLD] = BRAKES_HOLD_STATE,
    [BRAKES_CONTROLLED_BRAKE_STATE][BRAKES_DEPLOY] = BRAKES_DEPLOY_STATE,
    [BRAKES_CONTROLLED_BRAKE_STATE][BRAKES_RETRACT] = BRAKES_RETRACT_STATE,
    [BRAKES_CONTROLLED_BRAKE_STATE][BRAKES_SEEK] = BRAKES_SEEK_STATE,
    [BRAKES_CONTROLLED_BRAKE_STATE][BRAKES_EMERGENCY_BRAKE] = BRAKES_EMERGENCY_BRAKE_STATE,
    [BRAKES_CONTROLLED_BRAKE_STATE][BRAKES_INTERLOCK] = BRAKES_INTERLOCK_STATE,
    [BRAKES_EMERGENCY_BRAKE_STATE][BRAKES_DISABLE] = BRAKES_DISABLED_STATE,
    [BRAKES_EMERGENCY_BRAKE_STATE][BRAKES_HOLD] = BRAKES_HOLD_STATE,
    [BRAKES_EMERGENCY_BRAKE_STATE][BRAKES_DEPLOY] = BRAKES_DEPLOY_STATE,
    [BRAKES_EMERGENCY_BRAKE_STATE][BRAKES_RETRACT] = BRAKES_RETRACT_STATE,
    [BRAKES_EMERGENCY_BRAKE_STATE][BRAKES_SEEK] = BRAKES_SEEK_STATE,
    [BRAKES_EMERGENCY_BRAKE_STATE][BRAKES_CONTROLLED_BRAKE] = BRAKES_CONTROLLED_BRAKE_STATE,
    [BRAKES_EMERGENCY_BRAKE_STATE][BRAKES_INTERLOCK] = BRAKES_INTERLOCK_STATE,
    [BRAKES_INTERLOCK_STATE][BRAKES_RELEASE_INTERLOCK] = BRAKES_HOLD_STATE
};

static inline const E_BRAKES_STATE_T get_brakes_target_state(const E_BRAKES_STATE_T current_state, const E_BRAKES_COMMAND_T command)
{
    return brakes_state_command_target_state[current_state][command];
}


#endif // _BRAKES__TYPES_H_
